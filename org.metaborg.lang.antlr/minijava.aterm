Grammar(
  "minijava"
, [ Rule(
      None()
    , "goal"
    , Conc(Nonterminal("mainClass"), Star(Nonterminal("classDeclaration")))
    )
  , Rule(
      None()
    , "mainClass"
    , Conc(
        Conc(
          Conc(
            Conc(
              Conc(
                Conc(
                  Conc(
                    Conc(
                      Conc(
                        Conc(
                          Conc(
                            Conc(
                              Conc(
                                Conc(
                                  Conc(Conc(Literal("class"), Nonterminal("Identifier")), Literal("{"))
                                , Literal("public")
                                )
                              , Literal("static")
                              )
                            , Literal("void")
                            )
                          , Literal("main")
                          )
                        , Literal("(")
                        )
                      , Literal("String")
                      )
                    , Literal("[")
                    )
                  , Literal("]")
                  )
                , Nonterminal("Identifier")
                )
              , Literal(")")
              )
            , Literal("{")
            )
          , Nonterminal("statement")
          )
        , Literal("}")
        )
      , Literal("}")
      )
    )
  , Rule(
      None()
    , "classDeclaration"
    , Conc(
        Conc(
          Conc(
            Conc(
              Conc(
                Conc(Literal("class"), Nonterminal("Identifier"))
              , Opt(Conc(Literal("extends"), Nonterminal("Identifier")))
              )
            , Literal("{")
            )
          , Star(Nonterminal("fieldDeclaration"))
          )
        , Star(Nonterminal("methodDeclaration"))
        )
      , Literal("}")
      )
    )
  , Rule(None(), "fieldDeclaration", Nonterminal("varDeclaration"))
  , Rule(None(), "localDeclaration", Nonterminal("varDeclaration"))
  , Rule(
      None()
    , "varDeclaration"
    , Conc(Conc(Nonterminal("type"), Nonterminal("Identifier")), Literal(";"))
    )
  , Rule(
      None()
    , "methodDeclaration"
    , Conc(
        Conc(
          Conc(
            Conc(
              Conc(
                Conc(
                  Conc(Conc(Literal("public"), Nonterminal("type")), Nonterminal("Identifier"))
                , Literal("(")
                )
              , Opt(Nonterminal("parameterList"))
              )
            , Literal(")")
            )
          , Literal("{")
          )
        , Nonterminal("methodBody")
        )
      , Literal("}")
      )
    )
  , Rule(
      None()
    , "parameterList"
    , Conc(
        Nonterminal("parameter")
      , Star(Conc(Literal(","), Nonterminal("parameter")))
      )
    )
  , Rule(None(), "parameter", Conc(Nonterminal("type"), Nonterminal("Identifier")))
  , Rule(
      None()
    , "methodBody"
    , Conc(
        Conc(
          Conc(
            Conc(Star(Nonterminal("localDeclaration")), Star(Nonterminal("statement")))
          , Nonterminal("RETURN")
          )
        , Nonterminal("expression")
        )
      , Literal(";")
      )
    )
  , Rule(
      None()
    , "type"
    , Alt(
        Alt(
          Alt(
            Conc(Conc(Literal("int"), Literal("[")), Literal("]"))
          , Literal("boolean")
          )
        , Literal("int")
        )
      , Nonterminal("Identifier")
      )
    )
  , Rule(
      None()
    , "statement"
    , Alt(
        Alt(
          Alt(
            Alt(
              Conc(
                Conc(Literal("{"), Star(Nonterminal("statement")))
              , Literal("}")
              )
            , Conc(
                Conc(
                  Conc(
                    Conc(
                      Conc(Conc(Literal("if"), Nonterminal("LP")), Nonterminal("expression"))
                    , Nonterminal("RP")
                    )
                  , Nonterminal("ifBlock")
                  )
                , Literal("else")
                )
              , Nonterminal("elseBlock")
              )
            )
          , Conc(
              Conc(
                Conc(Conc(Literal("while"), Nonterminal("LP")), Nonterminal("expression"))
              , Nonterminal("RP")
              )
            , Nonterminal("whileBlock")
            )
          )
        , Conc(
            Conc(Conc(Nonterminal("Identifier"), Nonterminal("EQ")), Nonterminal("expression"))
          , Literal(";")
          )
        )
      , Conc(
          Conc(
            Conc(
              Conc(
                Conc(Conc(Nonterminal("Identifier"), Nonterminal("LSB")), Nonterminal("expression"))
              , Nonterminal("RSB")
              )
            , Nonterminal("EQ")
            )
          , Nonterminal("expression")
          )
        , Literal(";")
        )
      )
    )
  , Rule(None(), "ifBlock", Nonterminal("statement"))
  , Rule(None(), "elseBlock", Nonterminal("statement"))
  , Rule(None(), "whileBlock", Nonterminal("statement"))
  , Rule(
      None()
    , "expression"
    , Alt(
        Alt(
          Alt(
            Alt(
              Alt(
                Alt(
                  Alt(
                    Alt(
                      Alt(
                        Alt(
                          Alt(
                            Alt(
                              Alt(
                                Alt(
                                  Alt(
                                    Conc(
                                      Conc(Conc(Nonterminal("expression"), Nonterminal("LSB")), Nonterminal("expression"))
                                    , Nonterminal("RSB")
                                    )
                                  , Conc(Nonterminal("expression"), Nonterminal("DOTLENGTH"))
                                  )
                                , Conc(
                                    Conc(
                                      Conc(
                                        Conc(Conc(Nonterminal("expression"), Literal(".")), Nonterminal("Identifier"))
                                      , Literal("(")
                                      )
                                    , Opt(
                                        Conc(
                                          Nonterminal("expression")
                                        , Star(Conc(Literal(","), Nonterminal("expression")))
                                        )
                                      )
                                    )
                                  , Literal(")")
                                  )
                                )
                              , Conc(Nonterminal("NOT"), Nonterminal("expression"))
                              )
                            , Conc(
                                Conc(
                                  Conc(Conc(Literal("new"), Literal("int")), Nonterminal("LSB"))
                                , Nonterminal("expression")
                                )
                              , Nonterminal("RSB")
                              )
                            )
                          , Conc(
                              Conc(Conc(Literal("new"), Nonterminal("Identifier")), Literal("("))
                            , Literal(")")
                            )
                          )
                        , Conc(Conc(Nonterminal("expression"), Nonterminal("TIMES")), Nonterminal("expression"))
                        )
                      , Conc(Conc(Nonterminal("expression"), Nonterminal("PLUS")), Nonterminal("expression"))
                      )
                    , Conc(Conc(Nonterminal("expression"), Nonterminal("MINUS")), Nonterminal("expression"))
                    )
                  , Conc(Conc(Nonterminal("expression"), Nonterminal("LT")), Nonterminal("expression"))
                  )
                , Conc(Conc(Nonterminal("expression"), Nonterminal("AND")), Nonterminal("expression"))
                )
              , Nonterminal("IntegerLiteral")
              )
            , Nonterminal("BooleanLiteral")
            )
          , Nonterminal("Identifier")
          )
        , Literal("this")
        )
      , Conc(Conc(Literal("("), Nonterminal("expression")), Literal(")"))
      )
    )
  , Rule(None(), "AND", Literal("&&"))
  , Rule(None(), "LT", Literal("<"))
  , Rule(None(), "PLUS", Literal("+"))
  , Rule(None(), "MINUS", Literal("-"))
  , Rule(None(), "TIMES", Literal("*"))
  , Rule(None(), "POWER", Literal("**"))
  , Rule(None(), "NOT", Literal("!"))
  , Rule(None(), "LSB", Literal("["))
  , Rule(None(), "RSB", Literal("]"))
  , Rule(None(), "DOTLENGTH", Literal(".length"))
  , Rule(None(), "LP", Literal("("))
  , Rule(None(), "RP", Literal(")"))
  , Rule(None(), "RETURN", Literal("return"))
  , Rule(None(), "EQ", Literal("="))
  , Rule(None(), "BooleanLiteral", Alt(Literal("true"), Literal("false")))
  , Rule(
      None()
    , "Identifier"
    , Conc(Nonterminal("JavaLetter"), Star(Nonterminal("JavaLetterOrDigit")))
    )
  , Rule(
      Some(Fragment())
    , "JavaLetter"
    , CharClass(
        amb(
          [ RangeConc(
              RangeConc(
                RangeConc(CharRange("a", "z"), Single("A"))
              , Single("-")
              )
            , Single("Z")
            )
          , RangeConc(CharRange("a", "z"), CharRange("A", "Z"))
          ]
        )
      )
    )
  , Rule(
      Some(Fragment())
    , "JavaLetterOrDigit"
    , CharClass(
        RangeConc(
          amb(
            [ RangeConc(
                RangeConc(
                  RangeConc(
                    amb(
                      [ RangeConc(
                          RangeConc(
                            RangeConc(CharRange("a", "z"), Single("A"))
                          , Single("-")
                          )
                        , Single("Z")
                        )
                      , RangeConc(CharRange("a", "z"), CharRange("A", "Z"))
                      ]
                    )
                  , Single("0")
                  )
                , Single("-")
                )
              , Single("9")
              )
            , RangeConc(
                amb(
                  [ RangeConc(
                      RangeConc(
                        RangeConc(CharRange("a", "z"), Single("A"))
                      , Single("-")
                      )
                    , Single("Z")
                    )
                  , RangeConc(CharRange("a", "z"), CharRange("A", "Z"))
                  ]
                )
              , CharRange("0", "9")
              )
            ]
          )
        , Single("_")
        )
      )
    )
  , Rule(None(), "IntegerLiteral", Nonterminal("DecimalIntegerLiteral"))
  , Rule(Some(Fragment()), "DecimalIntegerLiteral", Nonterminal("DecimalNumeral"))
  , Rule(
      Some(Fragment())
    , "DecimalNumeral"
    , Alt(
        Literal("0")
      , Conc(
          Nonterminal("NonZeroDigit")
        , Alt(Opt(Nonterminal("Digits")), Nonterminal("Digits"))
        )
      )
    )
  , Rule(Some(Fragment()), "Digits", Plus(Nonterminal("Digit")))
  , Rule(
      Some(Fragment())
    , "Digit"
    , Alt(Literal("0"), Nonterminal("NonZeroDigit"))
    )
  , Rule(Some(Fragment()), "NonZeroDigit", CharClass(CharRange("1", "9")))
  ]
)